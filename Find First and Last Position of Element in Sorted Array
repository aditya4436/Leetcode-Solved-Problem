int LowerBound(vector<int> &arr, int target)
{
  int ans=arr.size();
  int low=0, high=ans-1;
  while(low<=high)
  {
      int mid=(low+high)/2;
      if(arr[mid]>=target)
      {
          ans=mid;
          high=mid-1;
      }
      else
      {
          low=mid+1;
      }
  }
  return ans;
}
int UpperBound(vector<int> &arr, int target)
{
  int ans=arr.size();
  int low=0, high=ans-1;
  while(low<=high)
  {
      int mid=(low+high)/2;
      if(arr[mid]>target)
      {
          ans=mid;
          high=mid-1;
      }
      else
      {
          low=mid+1;
      }
  }
  return ans;
}
vector<int> searchRange(vector<int>& nums, int target) 
{
      int first=LowerBound(nums, target);
      int last=UpperBound(nums, target);
      if(first==nums.size() || nums[first]!=target)
      {
          return{-1,-1};
      }
      return{first, last-1};
  }
