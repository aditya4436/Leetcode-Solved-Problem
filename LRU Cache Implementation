class LRUCache {
public:
    class Node{
        public:
            int key;
            int value;
            Node *next;
            Node *prev;
            Node(int _key, int _val){
                key=_key;
                value=_val;
            }
    };
    
    Node *head=new Node(-1, -1);
    Node *tail=new Node(-1, -1);
    
    int cap;
    unordered_map<int, Node*>m;
    LRUCache(int capacity) {
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
    
    void AddNode(Node *newNode){
        Node *temp=head->next;
        newNode->next=temp;
        newNode->prev=head;
        head->next=newNode;
        temp->prev=newNode;
    }
    
    void DeleteNode(Node *delnode){
        Node *delprev=delnode->prev;
        Node *delnext=delnode->next;
        delprev->next=delnext;
        delnext->prev=delprev;
    }
    
    int get(int key) {
        if(m.find(key)!=m.end()){
            Node *resNode=m[key];
            int res=resNode->value;
            m.erase(key);
            DeleteNode(resNode);
            AddNode(resNode);
            m[key]=head->next;
            return res;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(m.find(key)!=m.end()){
            Node *existingNode=m[key];
            m.erase(key);
            DeleteNode(existingNode);
        }
        if(m.size()==cap){
            m.erase(tail->prev->key);
            DeleteNode(tail->prev);
        }
        AddNode(new Node(key, value));
        m[key]=head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
