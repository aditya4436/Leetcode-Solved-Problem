class MyCircularQueue
{
public:
    int front;
    int rear;
    int size;
    int *queue;
    MyCircularQueue(int k)
    {
        front=-1;
        rear=-1;
        size=k;
        queue=new int [size];
    }
    
    bool enQueue(int value)
    {
        if(isFull())
        {
            return false;
        }
        else if(isEmpty())
        {
            front=rear=0;
        }
        else
        {
            rear=(rear+1)%size;
        }
        queue[rear]=value;
        return true;
    }
    
    bool deQueue()
    {
        if(isEmpty())
        {
            return false;
        }
        int temp=queue[front];
        queue[front]=-1;
        if(front==rear)
        {
            front=rear=-1;
        }
        else
        {
            front=(front+1)%size;
        }
        return true;
    }
    
    int Front()
    {
        if(front==-1)
        {
            return -1;
        }
        return queue[front];
    }
    
    int Rear()
    {
        if(front==-1)
        {
            return -1;
        }
        return queue[rear];
    }
    
    bool isEmpty()
    {
        if(front==-1 && rear==-1)
        {
            return true;
        } 
        else
        {
            return false;
        }       
    }
    
    bool isFull()
    {
        if((rear+1)%size==front)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
};
