void Merge(vector<int> &arr, int low, int mid, int high)
{
    int left=low, right=mid+1;
    vector<int> temp;
    while(left<=mid && right<=high)
    {
        if(arr[left]<=arr[right])
        {
            temp.push_back(arr[left]);
            left++;
        }
        else
        {
            temp.push_back(arr[right]);
            right++;
        }
    }
    while(left<=mid)
    {
        temp.push_back(arr[left]);
        left++;
    }
    while(right<=high)
    {
        temp.push_back(arr[right]);
        right++;
    }
    for(int i=low; i<=high; i++)
    {
        arr[i]=temp[i-low];
    }
}
int CountPairs(vector<int> &arr, int low, int mid, int high)
{
    int count=0, right=mid+1;
    for(int i=low; i<=mid; i++)
    {
        while(right<=high && arr[i]>(long long)2*arr[right])
        {
            right++;
        }
        count+=(right-(mid+1));
    }
    return count;
}
int MergeSort(vector<int> &arr, int low, int high)
{
    int count=0;
    if(low>=high)
    {
        return count;
    }
    int mid=(low+high)/2;
    count+=MergeSort(arr, low, mid);
    count+=MergeSort(arr, mid+1, high);
    count+=CountPairs(arr, low, mid, high);
    Merge(arr, low, mid, high);
    return count;
}
int reversePairs(vector<int>& nums) 
{
    return MergeSort(nums, 0, nums.size()-1);
}
