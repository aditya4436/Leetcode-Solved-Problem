/*It is a recursive approach below this there is iterative approach*/
class Solution
{
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
        if(list1==nullptr)
        {
            return list2;
        }
        else if(list2==nullptr)
        {
            return list1;
        }
        if(list1->val<=list2->val)
        {
            list1->next=mergeTwoLists(list1->next, list2);
            return list1;
        }
        else
        {
            list2->next=mergeTwoLists(list1, list2->next);
            return list2;
        }
    }
};


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* head1, ListNode* head2) {
        ListNode *newHead=new ListNode(), *dd=newHead;
        while(head1 && head2){
            if(head1->val<head2->val){
                dd->next=new ListNode();
                dd=dd->next;
                dd->val=head1->val;
                head1=head1->next;
            }
            else{
                dd->next=new ListNode();
                dd=dd->next;
                dd->val=head2->val;
                head2=head2->next;
            }
        }
        while(head1){
            dd->next=new ListNode();
            dd=dd->next;
            dd->val=head1->val;
            head1=head1->next;
        }
        while(head2){
            dd->next=new ListNode();
            dd=dd->next;
            dd->val=head2->val;
            head2=head2->next;
        }
        dd->next=NULL;
        return newHead->next;
    }
};
