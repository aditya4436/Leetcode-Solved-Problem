/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void BinaryTreePaths(TreeNode* root, vector<string>& ans, string currentPath = "") {
        if (!root) {
            return;
        }

        // Convert the integer value to a string before adding to the current path
        currentPath += to_string(root->val);

        // If the current node is a leaf node, add the current path to the result
        if (!root->left && !root->right) {
            ans.push_back(currentPath);
        } 
        else {
            // If not a leaf node, continue to the left and right subtrees
            currentPath += "->";
            if (root->left) {
                BinaryTreePaths(root->left, ans, currentPath);
            }
            if (root->right) {
                BinaryTreePaths(root->right, ans, currentPath);
            }
        }
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> ans;
        BinaryTreePaths(root, ans, "");
        return ans;
    }
};
